function [allData, scenario, sensors, egoVehicle] = demo_ghost_highway_ramp()
%demo_ghost_highway_ramp - Returns sensor detections
%    allData = demo_ghost_highway_ramp returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = demo_ghost_highway_ramp optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 9.10 (R2021a) and Automated Driving Toolbox 3.3 (R2021a).
% Generated on: 23-Jul-2021 11:04:14

% Create the drivingScenario object and ego car
[scenario, egoVehicle] = createDrivingScenario;

% Create all the sensors
[sensors, numSensors] = createSensors(scenario);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {}, 'PointClouds', {}, 'INSMeasurements', {});
running = true;
while running
    
    % Generate the target poses of all actors relative to the ego vehicle
    poses = targetPoses(egoVehicle);
    time  = scenario.SimulationTime;
    
    objectDetections = {};
    laneDetections   = [];
    ptClouds = {};
    insMeas = {};
    isValidTime = false(1, numSensors);
    
    % Generate detections for each sensor
    for sensorIndex = 1:numSensors
        sensor = sensors{sensorIndex};
        % Generate the ego vehicle lane boundaries
        if isa(sensor, 'visionDetectionGenerator')
            maxLaneDetectionRange = min(500,sensor.MaxRange);
            lanes = laneBoundaries(egoVehicle, 'XDistance', linspace(-maxLaneDetectionRange, maxLaneDetectionRange, 101));
        end
        [objectDets, numObjects, isValidTime(sensorIndex)] = sensor(poses, time);
        objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
    end
    
    % Aggregate all detections into a structure for later use
    if any(isValidTime)
        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections', {laneDetections}, ...
            'PointClouds',   {ptClouds}, ... %#ok<AGROW>
            'INSMeasurements',   {insMeas}); %#ok<AGROW>
    end
    
    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

% Release all the sensor objects so they can be used again.
for sensorIndex = 1:numSensors
    release(sensors{sensorIndex});
end

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function [sensors, numSensors] = createSensors(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensors{1} = drivingRadarDataGenerator('SensorIndex', 1, ...
    'UpdateRate', 25, ...
    'MountingLocation', [2.8 0.9 0.2], ...
    'MountingAngles', [70 0 0], ...
    'RangeLimits', [0 80], ...
    'TargetReportFormat', 'Detections', ...
    'AzimuthResolution', 5, ...
    'RangeResolution', 1, ...
    'ReferenceRange', 50, ...
    'FieldOfView', [150 12], ...
    'Profiles', profiles);
sensors{2} = drivingRadarDataGenerator('SensorIndex', 2, ...
    'UpdateRate', 25, ...
    'MountingLocation', [2.8 -0.9 0.2], ...
    'MountingAngles', [-70 0 0], ...
    'RangeLimits', [0 80], ...
    'TargetReportFormat', 'Detections', ...
    'AzimuthResolution', 5, ...
    'RangeResolution', 1, ...
    'ReferenceRange', 50, ...
    'FieldOfView', [150 12], ...
    'Profiles', profiles);
sensors{3} = drivingRadarDataGenerator('SensorIndex', 3, ...
    'UpdateRate', 25, ...
    'MountingLocation', [0 0.9 0.2], ...
    'MountingAngles', [110 0 0], ...
    'RangeLimits', [0 80], ...
    'TargetReportFormat', 'Detections', ...
    'AzimuthResolution', 5, ...
    'RangeResolution', 1, ...
    'ReferenceRange', 50, ...
    'FieldOfView', [150 12], ...
    'Profiles', profiles);
sensors{4} = drivingRadarDataGenerator('SensorIndex', 4, ...
    'UpdateRate', 25, ...
    'MountingLocation', [0 -0.9 0.2], ...
    'MountingAngles', [-110 0 0], ...
    'RangeLimits', [0 80], ...
    'TargetReportFormat', 'Detections', ...
    'AzimuthResolution', 5, ...
    'RangeResolution', 1, ...
    'ReferenceRange', 50, ...
    'FieldOfView', [150 12], ...
    'Profiles', profiles);
sensors{5} = drivingRadarDataGenerator('SensorIndex', 5, ...
    'UpdateRate', 25, ...
    'MountingLocation', [3.7 0 0.2], ...
    'RangeLimits', [0 200], ...
    'TargetReportFormat', 'Detections', ...
    'FieldOfView', [18 14], ...
    'Profiles', profiles);
sensors{6} = visionDetectionGenerator('SensorIndex', 6, ...
    'UpdateInterval', 0.04, ...
    'SensorLocation', [1.9 0], ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([800 799.999999999999],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
numSensors = 6;

function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario('SampleTime', 0.04);

% Add all road segments
roadCenters = [-150 -48.4 0;
    405 -47 0];
marking1 = [laneMarking('Solid')
    laneMarking('Dashed')
    laneMarking('Dashed')
    laneMarking('Solid')];

marking2 = [laneMarking('Solid')
    laneMarking('Dashed')
    laneMarking('Dashed')
    laneMarking('Dashed', 'Space', 2)
    laneMarking('Solid')];

marking3 = [laneMarking('Solid')
    laneMarking('Dashed')
    laneMarking('Dashed')
    laneMarking('Dashed')];

laneSpecifications = [lanespec(3, 'Marking', marking1)
    lanespec(4, 'Marking', marking2)
    lanespec(3, 'Marking', marking3)];
lsConnector = [laneSpecConnector('Position', 'Right', 'TaperLength', 20)
    laneSpecConnector('Position', 'Right', 'TaperLength', 40)];
compLaneSpecification = compositeLaneSpec(laneSpecifications, 'Connector', lsConnector, 'SegmentRange', [0.35 0.25 0.4]);
road1 = road(scenario, roadCenters, 'Lanes', compLaneSpecification, 'Name', 'Road');

roadCenters = [0.1 -79.8 0;
    24.5 -66.6 0;
    56.3 -56 0;
    76.6 -55.3 0];
marking = laneMarking('Solid');
laneSpecification = lanespec(1, 'Marking', marking);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road1');

% Add the barriers
barrier(scenario, road1, 'RoadEdge', 'left', ...
    'ClassID', 6, ...
    'Width', 0.433, ...
    'Mesh', driving.scenario.guardrailMesh, 'PlotColor', [0.55 0.55 0.55], 'Name', 'Guardrail');

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [3.9 -78 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car');
waypoints = [3.9 -78 0;
    21.2 -68.2 0;
    44.91 -58.66 0;
    54.95 -56.64 0;
    88.2 -55.6 0;
    105.47 -55.29 0;
    171.93 -51.21 0;
    211.4 -51.1 0;
    307.1 -51.2 0];
speed = [10;10;10;15;20;20;20;20;20];
waittime = [0;0;0;0;0;0;0;0;0];
trajectory(egoVehicle, waypoints, speed, waittime);

% Add the non-ego actors
car1 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [30.9627000467335 -63.2810405024119 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [255 105 41] / 255, ...
    'Name', 'Car1');
waypoints = [30.9627000467335 -63.2810405024119 0;
    44.99 -58.68 0.01;
    55 -56.8 0;
    88.38 -55.69 0.01;
    105 -55.5 0;
    171.84 -51.1 0.01;
    211.43 -51.08 0.01;
    307 -51.3 0];
speed = [10;10;15;20;20;20;20;20];
waittime = [0;0;0;0;0;0;0;0];
trajectory(car1, waypoints, speed, waittime);

car2 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [57.8189346956169 -52.2012628849799 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car2');
waypoints = [57.8189346956169 -52.2012628849799 0;
    400.33 -50.57 0.01];
speed = [20;20];
waittime = [0;0];
trajectory(car2, waypoints, speed, waittime);

car3 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-20.2432796186339 -48.5028403660527 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [119 172 48] / 255, ...
    'Name', 'Car3');
waypoints = [-20.2432796186339 -48.5028403660527 0;
    400.3 -47.28 0.01];
speed = [25;25];
waittime = [0;0];
trajectory(car3, waypoints, speed, waittime);

car4 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [25.5856013622836 -52.2012628849799 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0.929 0.694 0.125], ...
    'Name', 'Car4');
waypoints = [25.5856013622836 -52.2012628849799 0;
    400.39 -50.6 0.01];
speed = [20;20];
waittime = [0;0];
trajectory(car4, waypoints, speed, waittime);

car5 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [11.5688931926843 -48.5029674243052 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [119 172 48] / 255, ...
    'Name', 'Car5');
waypoints = [11.5688931926843 -48.5029674243052 0;
    400.33 -47.28 0.01];
speed = [25;25];
waittime = [0;0];
trajectory(car5, waypoints, speed, waittime);

car6 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-41.1773899596177 -44.7001002549312 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [126 47 142] / 255, ...
    'Name', 'Car6');
waypoints = [-41.1773899596177 -44.7001002549312 0;
    400 -44 0];
speed = [30;30];
waittime = [0;0];
trajectory(car6, waypoints, speed, waittime);

car7 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-23.2344418227764 -52.1615513460021 0.01], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [237 177 32] / 255, ...
    'Name', 'Car7');
waypoints = [-23.2344418227764 -52.1615513460021 0.01;
    400.39 -50.6 0.01];
speed = [20;20];
waittime = [0;0];
trajectory(car7, waypoints, speed, waittime);

car8 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-84.1413306999494 -52.0917399537959 0.01], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0.929 0.694 0.125], ...
    'Name', 'Car8');
waypoints = [-84.1413306999494 -52.0917399537959 0.01;
    400.39 -50.63 0.01];
speed = [20;20];
waittime = [0;0];
trajectory(car8, waypoints, speed, waittime);

car9 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-121.377389959618 -44.7001002549312 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [126 47 142] / 255, ...
    'Name', 'Car9');
waypoints = [-121.377389959618 -44.7001002549312 0;
    399.88 -43.81 0.01];
speed = [30;30];
waittime = [0;0];
trajectory(car9, waypoints, speed, waittime);

car10 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-83.8676252036883 -48.5025876569343 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [119 172 48] / 255, ...
    'Name', 'Car10');
waypoints = [-83.8676252036883 -48.5025876569343 0;
    400.33 -47.22 0.01];
speed = [25;25];
waittime = [0;0];
trajectory(car10, waypoints, speed, waittime);

car11 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-114.65141888556 -52.1305938486299 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0.929 0.694 0.125], ...
    'Name', 'Car11');
waypoints = [-114.65141888556 -52.1305938486299 0;
    400.42 -50.66 0.01];
speed = [20;20];
waittime = [0;0];
trajectory(car11, waypoints, speed, waittime);

car12 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-3.1479119009534 -44.3960134512288 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [126 47 142] / 255, ...
    'Name', 'Car12');
waypoints = [-3.1479119009534 -44.3960134512288 0;
    399.88 -43.82 0.01];
speed = [30;30];
waittime = [0;0];
trajectory(car12, waypoints, speed, waittime);

car13 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-115.679794400256 -48.497876671696 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [119 172 48] / 255, ...
    'Name', 'Car13');
waypoints = [-115.679794400256 -48.497876671696 0;
    400.24 -47.25 0.01];
speed = [25;25];
waittime = [0;0];
trajectory(car13, waypoints, speed, waittime);

car14 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-52.0554245951475 -48.4924311996127 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [119 172 48] / 255, ...
    'Name', 'Car14');
waypoints = [-52.0554245951475 -48.4924311996127 0;
    400.24 -47.22 0.01];
speed = [25;25];
waittime = [0;0];
trajectory(car14, waypoints, speed, waittime);

car15 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-147.49191594778 -48.4890024841794 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [119 172 48] / 255, ...
    'Name', 'Car15');
waypoints = [-147.49191594778 -48.4890024841794 0;
    400.21 -47.22 0.01];
speed = [25;25];
waittime = [0;0];
trajectory(car15, waypoints, speed, waittime);

