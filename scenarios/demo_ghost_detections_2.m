function [allData, scenario, sensors, egoVehicle] = demo_ghost_detections_2()
%demo_ghost_detections_2 - Returns sensor detections
%    allData = demo_ghost_detections_2 returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = demo_ghost_detections_2 optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 9.10 (R2021a) and Automated Driving Toolbox 3.3 (R2021a).
% Generated on: 23-Aug-2021 13:32:02

% Create the drivingScenario object and ego car
[scenario, egoVehicle] = createDrivingScenario;

% Create all the sensors
[sensors, numSensors] = createSensors(scenario);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {}, 'PointClouds', {}, 'INSMeasurements', {});
running = true;
while running
    
    % Generate the target poses of all actors relative to the ego vehicle
    poses = targetPoses(egoVehicle);
    time  = scenario.SimulationTime;
    
    objectDetections = {};
    laneDetections   = [];
    ptClouds = {};
    insMeas = {};
    isValidTime = false(1, numSensors);
    
    % Generate detections for each sensor
    for sensorIndex = 1:numSensors
        sensor = sensors{sensorIndex};
        % Generate the ego vehicle lane boundaries
        if isa(sensor, 'visionDetectionGenerator')
            maxLaneDetectionRange = min(500,sensor.MaxRange);
            lanes = laneBoundaries(egoVehicle, 'XDistance', linspace(-maxLaneDetectionRange, maxLaneDetectionRange, 101));
        end
        [objectDets, numObjects, isValidTime(sensorIndex)] = sensor(poses, time);
        objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
    end
    
    % Aggregate all detections into a structure for later use
    if any(isValidTime)
        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections', {laneDetections}, ...
            'PointClouds',   {ptClouds}, ... %#ok<AGROW>
            'INSMeasurements',   {insMeas}); %#ok<AGROW>
    end
    
    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

% Release all the sensor objects so they can be used again.
for sensorIndex = 1:numSensors
    release(sensors{sensorIndex});
end

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function [sensors, numSensors] = createSensors(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensors{1} = drivingRadarDataGenerator('SensorIndex', 1, ...
    'UpdateRate', 25, ...
    'MountingLocation', [2.8 0.9 0.2], ...
    'MountingAngles', [70 0 0], ...
    'RangeLimits', [0 80], ...
    'TargetReportFormat', 'Detections', ...
    'AzimuthResolution', 5, ...
    'RangeResolution', 1, ...
    'ReferenceRange', 50, ...
    'FieldOfView', [150 12], ...
    'Profiles', profiles);
sensors{2} = drivingRadarDataGenerator('SensorIndex', 2, ...
    'UpdateRate', 25, ...
    'MountingLocation', [2.8 -0.9 0.2], ...
    'MountingAngles', [-70 0 0], ...
    'RangeLimits', [0 80], ...
    'TargetReportFormat', 'Detections', ...
    'AzimuthResolution', 5, ...
    'RangeResolution', 1, ...
    'ReferenceRange', 50, ...
    'FieldOfView', [150 12], ...
    'Profiles', profiles);
sensors{3} = drivingRadarDataGenerator('SensorIndex', 3, ...
    'UpdateRate', 25, ...
    'MountingLocation', [0 0.9 0.2], ...
    'MountingAngles', [110 0 0], ...
    'RangeLimits', [0 80], ...
    'TargetReportFormat', 'Detections', ...
    'AzimuthResolution', 5, ...
    'RangeResolution', 1, ...
    'ReferenceRange', 50, ...
    'FieldOfView', [150 12], ...
    'Profiles', profiles);
sensors{4} = drivingRadarDataGenerator('SensorIndex', 4, ...
    'UpdateRate', 25, ...
    'MountingLocation', [0 -0.9 0.2], ...
    'MountingAngles', [-110 0 0], ...
    'RangeLimits', [0 80], ...
    'TargetReportFormat', 'Detections', ...
    'AzimuthResolution', 5, ...
    'RangeResolution', 1, ...
    'ReferenceRange', 50, ...
    'FieldOfView', [150 12], ...
    'Profiles', profiles);
sensors{5} = drivingRadarDataGenerator('SensorIndex', 5, ...
    'UpdateRate', 25, ...
    'MountingLocation', [3.7 0 0.2], ...
    'RangeLimits', [0 200], ...
    'TargetReportFormat', 'Detections', ...
    'FieldOfView', [18 14], ...
    'Profiles', profiles);
sensors{6} = visionDetectionGenerator('SensorIndex', 6, ...
    'UpdateInterval', 0.04, ...
    'SensorLocation', [1.9 0], ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([800 799.999999999999],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
numSensors = 6;

function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario;

% Add all road segments
roadCenters = [0 0 0;
    100 0 0];
laneSpecification = lanespec(3);
road1 = road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road');

% Add the barriers
barrier(scenario, road1, 'RoadEdge', 'right', ...
    'ClassID', 6, ...
    'Width', 0.433, ...
    'Mesh', driving.scenario.guardrailMesh, 'PlotColor', [0.55 0.55 0.55], 'Name', 'Guardrail1');

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [2 0 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0.635 0.078 0.184], ...
    'Name', 'Car');
waypoints = [2 0 0;
    100 0 0];
speed = [20;20];
waittime = [0;0];
trajectory(egoVehicle, waypoints, speed, waittime);

% Add the non-ego actors
car1 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [30 3.6 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0 0.447 0.741], ...
    'Name', 'Car1');
waypoints = [30 3.6 0;
    100 3.6 0.01];
speed = [20;20];
waittime = [0;0];
trajectory(car1, waypoints, speed, waittime);

